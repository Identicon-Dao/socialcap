Proofs enabled= true
compiling Contract ... [class ElectionsContract extends SmartContract] {
  _methods: [
    {
      methodName: 'assertOnlyDeployer',
      witnessArgs: [Array],
      proofArgs: [],
      allArgs: [Array],
      genericArgs: []
    },
    {
      methodName: 'checkMerkleUpdate',
      witnessArgs: [Array],
      proofArgs: [],
      allArgs: [Array],
      genericArgs: []
    },
    {
      methodName: 'updateTask',
      witnessArgs: [Array],
      proofArgs: [],
      allArgs: [Array],
      genericArgs: []
    },
    {
      methodName: 'updateNullifier',
      witnessArgs: [Array],
      proofArgs: [],
      allArgs: [Array],
      genericArgs: []
    }
  ],
  _maxProofsVerified: 0
}
compiled !
deployer Addr= PublicKey {
  x: Field { value: [ 0, [Uint8Array] ] },
  isOdd: Bool { value: [ 0, [Uint8Array] ] }
}
sender Addr= PublicKey {
  x: Field { value: [ 0, [Uint8Array] ] },
  isOdd: Bool { value: [ 0, [Uint8Array] ] }
}
zkApp Addr= B62qrfbsvFPSgFByqwVxXkwbhqCfRgttChH6313JgBfzM9jn7UXdXw2
zkApp= ElectionsContract {
  events: {},
  address: PublicKey {
    x: Field { value: [Array] },
    isOdd: Bool { value: [Array] }
  },
  tokenId: Field { value: [ 0, [Uint8Array] ] },
  _: {
    tasksRoot: {
      _contract: [Object],
      set: [Function: set],
      assertEquals: [Function: assertEquals],
      assertNothing: [Function: assertNothing],
      get: [Function: get],
      getAndAssertEquals: [Function: getAndAssertEquals],
      fetch: [AsyncFunction: fetch],
      fromAppState: [Function: fromAppState]
    },
    nullifierRoot: {
      _contract: [Object],
      set: [Function: set],
      assertEquals: [Function: assertEquals],
      assertNothing: [Function: assertNothing],
      get: [Function: get],
      getAndAssertEquals: [Function: getAndAssertEquals],
      fetch: [AsyncFunction: fetch],
      fromAppState: [Function: fromAppState]
    }
  }
}
Deployed
begin testing contract ... updateTask
ProvableTask {
  uid: Field { value: [ 0, [Uint8Array] ] },
  claimUid: Field { value: [ 0, [Uint8Array] ] },
  assigneeUid: Field { value: [ 0, [Uint8Array] ] },
  state: Field { value: [ 0, [Uint8Array] ] },
  assignedUTC: Field { value: [ 0, [Uint8Array] ] },
  completedUTC: Field { value: [ 0, [Uint8Array] ] },
  dueUTC: Field { value: [ 0, [Uint8Array] ] },
  rewarded: Field { value: [ 0, [Uint8Array] ] },
  reason: Field { value: [ 0, [Uint8Array] ] }
}
Circuit.log previousRoot= 22731122946631793544306773678309960639073656601863129978322145324846701682624
Circuit.log previousKey= 8736279261588709690118216800977081958
Circuit.log equals afterLeaf.key= 8736279261588709690118216800977081958
Circuit.log previousKey= 8736279261588709690118216800977081958
Circuit.log hash= 5621452519813649430925651232347988017197071063192023239308134950075152111391
Circuit.log newRoot= 16357118772730689489473347081368912191349905034021298422682179146218816579348
Circuit.log previousRoot= 22731122946631793544306773678309960639073656601863129978322145324846701682624
Circuit.log previousKey= 8736279261588709690118216800977081958
Circuit.log equals afterLeaf.key= 8736279261588709690118216800977081958
Circuit.log previousKey= 8736279261588709690118216800977081958
Circuit.log hash= 5621452519813649430925651232347988017197071063192023239308134950075152111391
Circuit.log newRoot= 16357118772730689489473347081368912191349905034021298422682179146218816579348
Circuit.log previousRoot= 22731122946631793544306773678309960639073656601863129978322145324846701682624
Circuit.log previousKey= 8736279261588709690118216800977081958
Circuit.log equals afterLeaf.key= 8736279261588709690118216800977081958
Circuit.log previousKey= 8736279261588709690118216800977081958
Circuit.log hash= 5621452519813649430925651232347988017197071063192023239308134950075152111391
Circuit.log newRoot= 16357118772730689489473347081368912191349905034021298422682179146218816579348
Circuit.log previousRoot= 22731122946631793544306773678309960639073656601863129978322145324846701682624
Circuit.log previousKey= 8736279261588709690118216800977081958
Circuit.log equals afterLeaf.key= 8736279261588709690118216800977081958
Circuit.log previousKey= 8736279261588709690118216800977081958
Circuit.log hash= 5621452519813649430925651232347988017197071063192023239308134950075152111391
{
  "mapId": "6",
  "txId": "11",
  "beforeRoot": "22731122946631793544306773678309960639073656601863129978322145324846701682624",
  "beforeLeaf": {
    "key": "8736279261588709690118216800977081958",
    "hash": "0"
  },
  "afterRoot": "16357118772730689489473347081368912191349905034021298422682179146218816579348",
  "afterLeaf": {
    "key": "8736279261588709690118216800977081958",
    "hash": "5621452519813649430925651232347988017197071063192023239308134950075152111391"
  }
}
updatedRoot= Field {
  value: [
    0,
    Uint8Array(32) [
       20, 167, 146,  77, 181, 198, 125,
       11, 137, 172, 238, 156,  89, 152,
      210, 206, 224,  69, 187, 236,  89,
      147, 216, 107, 227,  84, 231, 151,
       23, 205,  41,  36
    ]
  ]
}
begin testing contract ... updateNullifier
ProvableElector {
  claimUid: Field { value: [ 0, [Uint8Array] ] },
  electorId: PublicKey {
    x: Field { value: [Array] },
    isOdd: Bool { value: [Array] }
  },
  state: Field { value: [ 0, [Uint8Array] ] }
}
Circuit.log previousRoot= 22731122946631793544306773678309960639073656601863129978322145324846701682624
Circuit.log previousKey= 12456451056671768573099295925391871189983252468098465945353110889350090708022
Circuit.log equals afterLeaf.key= 12456451056671768573099295925391871189983252468098465945353110889350090708022
Circuit.log previousKey= 12456451056671768573099295925391871189983252468098465945353110889350090708022
Circuit.log hash= 1
Circuit.log newRoot= 19133649796701028247538237945733278226445735603694864096430367488679408583390
Circuit.log previousRoot= 22731122946631793544306773678309960639073656601863129978322145324846701682624
Circuit.log previousKey= 12456451056671768573099295925391871189983252468098465945353110889350090708022
Circuit.log equals afterLeaf.key= 12456451056671768573099295925391871189983252468098465945353110889350090708022
Circuit.log previousKey= 12456451056671768573099295925391871189983252468098465945353110889350090708022
Circuit.log hash= 1
Circuit.log newRoot= 19133649796701028247538237945733278226445735603694864096430367488679408583390
Circuit.log previousRoot= 22731122946631793544306773678309960639073656601863129978322145324846701682624
Circuit.log previousKey= 12456451056671768573099295925391871189983252468098465945353110889350090708022
Circuit.log equals afterLeaf.key= 12456451056671768573099295925391871189983252468098465945353110889350090708022
Circuit.log previousKey= 12456451056671768573099295925391871189983252468098465945353110889350090708022
Circuit.log hash= 1
Circuit.log newRoot= 19133649796701028247538237945733278226445735603694864096430367488679408583390
Circuit.log previousRoot= 22731122946631793544306773678309960639073656601863129978322145324846701682624
Circuit.log previousKey= 12456451056671768573099295925391871189983252468098465945353110889350090708022
Circuit.log equals afterLeaf.key= 12456451056671768573099295925391871189983252468098465945353110889350090708022
Circuit.log previousKey= 12456451056671768573099295925391871189983252468098465945353110889350090708022
Circuit.log hash= 1
{
  "mapId": "8",
  "txId": "11",
  "beforeRoot": "22731122946631793544306773678309960639073656601863129978322145324846701682624",
  "beforeLeaf": {
    "key": "12456451056671768573099295925391871189983252468098465945353110889350090708022",
    "hash": "0"
  },
  "afterRoot": "19133649796701028247538237945733278226445735603694864096430367488679408583390",
  "afterLeaf": {
    "key": "12456451056671768573099295925391871189983252468098465945353110889350090708022",
    "hash": "1"
  }
}
updatedRoot= Field {
  value: [
    0,
    Uint8Array(32) [
      222,  66, 24, 121,  95, 68, 210,  59,
       77,  61, 91,  35, 255, 48, 117,   4,
      139, 195, 31, 111,  69, 94, 137, 255,
      174, 194, 55,  28,  19, 67,  77,  42
    ]
  ]
}
