Proofs enabled= true
compiling Contract ... [class ClaimingsContract extends SmartContract] {
  _methods: [
    {
      methodName: 'assertOnlyDeployer',
      witnessArgs: [Array],
      proofArgs: [],
      allArgs: [Array],
      genericArgs: []
    },
    {
      methodName: 'checkMerkleUpdate',
      witnessArgs: [Array],
      proofArgs: [],
      allArgs: [Array],
      genericArgs: []
    },
    {
      methodName: 'updateClaim',
      witnessArgs: [Array],
      proofArgs: [],
      allArgs: [Array],
      genericArgs: []
    },
    {
      methodName: 'updatePlan',
      witnessArgs: [Array],
      proofArgs: [],
      allArgs: [Array],
      genericArgs: []
    },
    {
      methodName: 'updateCredential',
      witnessArgs: [Array],
      proofArgs: [],
      allArgs: [Array],
      genericArgs: []
    }
  ],
  _maxProofsVerified: 0
}
compiled !
deployer Addr= PublicKey {
  x: Field { value: [ 0, [Uint8Array] ] },
  isOdd: Bool { value: [ 0, [Uint8Array] ] }
}
sender Addr= PublicKey {
  x: Field { value: [ 0, [Uint8Array] ] },
  isOdd: Bool { value: [ 0, [Uint8Array] ] }
}
zkApp Addr= B62qk3BrSSmuoV9w4QpYnR9ej6rNNbqqFFCk6dYXVM5M7sZ9o5DzQAb
zkApp= ClaimingsContract {
  events: {},
  address: PublicKey {
    x: Field { value: [Array] },
    isOdd: Bool { value: [Array] }
  },
  tokenId: Field { value: [ 0, [Uint8Array] ] },
  _: {
    plansRoot: {
      _contract: [Object],
      set: [Function: set],
      assertEquals: [Function: assertEquals],
      assertNothing: [Function: assertNothing],
      get: [Function: get],
      getAndAssertEquals: [Function: getAndAssertEquals],
      fetch: [AsyncFunction: fetch],
      fromAppState: [Function: fromAppState]
    },
    claimsRoot: {
      _contract: [Object],
      set: [Function: set],
      assertEquals: [Function: assertEquals],
      assertNothing: [Function: assertNothing],
      get: [Function: get],
      getAndAssertEquals: [Function: getAndAssertEquals],
      fetch: [AsyncFunction: fetch],
      fromAppState: [Function: fromAppState]
    },
    credentialsRoot: {
      _contract: [Object],
      set: [Function: set],
      assertEquals: [Function: assertEquals],
      assertNothing: [Function: assertNothing],
      get: [Function: get],
      getAndAssertEquals: [Function: getAndAssertEquals],
      fetch: [AsyncFunction: fetch],
      fromAppState: [Function: fromAppState]
    }
  }
}
Deployed
begin testing contract ... updateClaim
ProvableClaim {
  uid: Field { value: [ 0, [Uint8Array] ] },
  communityUid: Field { value: [ 0, [Uint8Array] ] },
  planUid: Field { value: [ 0, [Uint8Array] ] },
  applicantUid: Field { value: [ 0, [Uint8Array] ] },
  accountId: PublicKey {
    x: Field { value: [Array] },
    isOdd: Bool { value: [Array] }
  },
  state: Field { value: [ 0, [Uint8Array] ] },
  alias: CircuitString {
    values: [
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      ... 28 more items
    ]
  },
  createdUTC: Field { value: [ 0, [Uint8Array] ] },
  updatedUTC: Field { value: [ 0, [Uint8Array] ] },
  votedUTC: Field { value: [ 0, [Uint8Array] ] },
  issuedUTC: Field { value: [ 0, [Uint8Array] ] },
  dueUTC: Field { value: [ 0, [Uint8Array] ] },
  requiredVotes: Field { value: [ 0, [Uint8Array] ] },
  requiredPositives: Field { value: [ 0, [Uint8Array] ] },
  currentVotes: 0,
  positiveVotes: Field { value: [ 0, [Uint8Array] ] },
  negativeVotes: Field { value: [ 0, [Uint8Array] ] },
  ignoredVotes: Field { value: [ 0, [Uint8Array] ] },
  evidenceDataHash: Field { value: [ 0, [Uint8Array] ] }
}
Circuit.log previousRoot= 22731122946631793544306773678309960639073656601863129978322145324846701682624
Circuit.log previousKey= 255640072262448372347286376175049734334
Circuit.log equals afterLeaf.key= 255640072262448372347286376175049734334
Circuit.log previousKey= 255640072262448372347286376175049734334
Circuit.log hash= 3550877798621497542760516508136297076865721142316086007093570584612188301392
Circuit.log newRoot= 10764923128147389064491901469522028178876631878749853344795387197395330095817
Circuit.log previousRoot= 22731122946631793544306773678309960639073656601863129978322145324846701682624
Circuit.log previousKey= 255640072262448372347286376175049734334
Circuit.log equals afterLeaf.key= 255640072262448372347286376175049734334
Circuit.log previousKey= 255640072262448372347286376175049734334
Circuit.log hash= 3550877798621497542760516508136297076865721142316086007093570584612188301392
Circuit.log newRoot= 10764923128147389064491901469522028178876631878749853344795387197395330095817
Circuit.log previousRoot= 22731122946631793544306773678309960639073656601863129978322145324846701682624
Circuit.log previousKey= 255640072262448372347286376175049734334
Circuit.log equals afterLeaf.key= 255640072262448372347286376175049734334
Circuit.log previousKey= 255640072262448372347286376175049734334
Circuit.log hash= 3550877798621497542760516508136297076865721142316086007093570584612188301392
Circuit.log newRoot= 10764923128147389064491901469522028178876631878749853344795387197395330095817
Circuit.log previousRoot= 22731122946631793544306773678309960639073656601863129978322145324846701682624
Circuit.log previousKey= 255640072262448372347286376175049734334
Circuit.log equals afterLeaf.key= 255640072262448372347286376175049734334
Circuit.log previousKey= 255640072262448372347286376175049734334
Circuit.log hash= 3550877798621497542760516508136297076865721142316086007093570584612188301392
{
  "mapId": "5",
  "txId": "11",
  "beforeRoot": "22731122946631793544306773678309960639073656601863129978322145324846701682624",
  "beforeLeaf": {
    "key": "255640072262448372347286376175049734334",
    "hash": "0"
  },
  "afterRoot": "10764923128147389064491901469522028178876631878749853344795387197395330095817",
  "afterLeaf": {
    "key": "255640072262448372347286376175049734334",
    "hash": "3550877798621497542760516508136297076865721142316086007093570584612188301392"
  }
}
updatedRoot= Field {
  value: [
    0,
    Uint8Array(32) [
      201,  90,  39, 126, 144, 128, 246, 179,
      133, 199,  62, 126, 152, 181,  69, 180,
      129, 190, 205, 129, 233,  61,  67, 122,
      131,  83,  56, 201,   6, 187, 204,  23
    ]
  ]
}
begin testing contract ... updatePlan
ProvablePlan {
  uid: Field { value: [ 0, [Uint8Array] ] },
  communityUid: Field { value: [ 0, [Uint8Array] ] },
  state: Field { value: [ 0, [Uint8Array] ] },
  name: CircuitString {
    values: [
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      ... 28 more items
    ]
  },
  description: CircuitString {
    values: [
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      ... 28 more items
    ]
  },
  image: CircuitString {
    values: [
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      [Character], [Character], [Character], [Character], [Character],
      ... 28 more items
    ]
  },
  evidenceHash: Field { value: [ 0, [Uint8Array] ] },
  metadataHash: Field { value: [ 0, [Uint8Array] ] },
  instructionsHash: Field { value: [ 0, [Uint8Array] ] },
  legalHash: Field { value: [ 0, [Uint8Array] ] },
  fee: Field { value: [ 0, [Uint8Array] ] },
  rewardsShare: Field { value: [ 0, [Uint8Array] ] },
  communityShare: Field { value: [ 0, [Uint8Array] ] },
  protocolShare: Field { value: [ 0, [Uint8Array] ] },
  total: Field { value: [ 0, [Uint8Array] ] },
  expiration: Field { value: [ 0, [Uint8Array] ] },
  revocable: Bool { value: [ 0, [Uint8Array] ] },
  startsUTC: Field { value: [ 0, [Uint8Array] ] },
  endsUTC: Field { value: [ 0, [Uint8Array] ] },
  strategyHash: Field { value: [ 0, [Uint8Array] ] },
  createdUTC: Field { value: [ 0, [Uint8Array] ] },
  updatedUTC: Field { value: [ 0, [Uint8Array] ] },
  approvedUTC: Field { value: [ 0, [Uint8Array] ] },
  available: Field { value: [ 0, [Uint8Array] ] }
}
Circuit.log previousRoot= 22731122946631793544306773678309960639073656601863129978322145324846701682624
Circuit.log previousKey= 231602974489307119583008037091948212582
Circuit.log equals afterLeaf.key= 231602974489307119583008037091948212582
Circuit.log previousKey= 231602974489307119583008037091948212582
Circuit.log hash= 9835553596560431007459527379134696070476885523913426979871032184787702867613
Circuit.log newRoot= 12081034846483348563794458597225996288319953669122380375954472394538048116932
Circuit.log previousRoot= 22731122946631793544306773678309960639073656601863129978322145324846701682624
Circuit.log previousKey= 231602974489307119583008037091948212582
Circuit.log equals afterLeaf.key= 231602974489307119583008037091948212582
Circuit.log previousKey= 231602974489307119583008037091948212582
Circuit.log hash= 9835553596560431007459527379134696070476885523913426979871032184787702867613
Circuit.log newRoot= 12081034846483348563794458597225996288319953669122380375954472394538048116932
Circuit.log previousRoot= 22731122946631793544306773678309960639073656601863129978322145324846701682624
Circuit.log previousKey= 231602974489307119583008037091948212582
Circuit.log equals afterLeaf.key= 231602974489307119583008037091948212582
Circuit.log previousKey= 231602974489307119583008037091948212582
Circuit.log hash= 9835553596560431007459527379134696070476885523913426979871032184787702867613
Circuit.log newRoot= 12081034846483348563794458597225996288319953669122380375954472394538048116932
Circuit.log previousRoot= 22731122946631793544306773678309960639073656601863129978322145324846701682624
Circuit.log previousKey= 231602974489307119583008037091948212582
Circuit.log equals afterLeaf.key= 231602974489307119583008037091948212582
Circuit.log previousKey= 231602974489307119583008037091948212582
Circuit.log hash= 9835553596560431007459527379134696070476885523913426979871032184787702867613
{
  "mapId": "4",
  "txId": "11",
  "beforeRoot": "22731122946631793544306773678309960639073656601863129978322145324846701682624",
  "beforeLeaf": {
    "key": "231602974489307119583008037091948212582",
    "hash": "0"
  },
  "afterRoot": "12081034846483348563794458597225996288319953669122380375954472394538048116932",
  "afterLeaf": {
    "key": "231602974489307119583008037091948212582",
    "hash": "9835553596560431007459527379134696070476885523913426979871032184787702867613"
  }
}
updatedRoot= Field {
  value: [
    0,
    Uint8Array(32) [
      196,  88,  57,  13, 192, 214, 162,
      238,  54, 133, 249, 159, 189, 240,
      138,  19, 149, 117,  58, 248, 188,
       49, 226, 190,  20, 223, 170, 151,
      151, 159, 181,  26
    ]
  ]
}
