// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// Merkle Maps 
//
model MerkleMap {
  id         Int      @id @default(autoincrement())
  name       String
  root       BigInt
  size       Int
  height     Int
  createdUtc DateTime @default(now()) @map("created_utc")
  updatedUtc DateTime @updatedAt @map("updated_utc")

  leafs MerkleMapLeaf[] @relation(name: "map_leafs")

  @@map("merkle_map")
}

model MerkleMapLeaf {
  uid        String   @id @default(uuid())
  mapId      Int      @map("merkle_map_id")
  index      BigInt // a Bigint
  key        String // a Bigint
  hash       String // a Bigint
  data       String // JSON stringified
  createdUtc DateTime @default(now()) @map("created_utc")
  updatedUtc DateTime @updatedAt @map("updated_utc")

  // Many to one relation: MarkleMapLeaf belongs to MerkleMap
  map MerkleMap @relation(name: "map_leafs", fields: [mapId], references: [id])

  @@map("merkle_map_leaf")
}

//
// Entities
// 
model Session {
  uid        String   @id @unique @default(uuid())
  otp        String
  email      String
  createdUtc DateTime @default(now()) @map("created_utc")
  updatedUtc DateTime @updatedAt @map("updated_utc")

  @@map("sessions")
}

model Person {
  uid         String    @id @unique
  accountId   String?   @map("account_id")
  state       String // P-Pending A-Active V-Verified S-Suspended X-Deleted  
  fullName    String    @map("full_name")
  description String?
  image       String? // a DataURL
  email       String    @unique
  phone       String?
  telegram    String?
  preferences String?
  createdUTC  DateTime  @default(now()) @map("created_utc")
  updatedUTC  DateTime? @updatedAt @map("updated_utc")
  approvedUTC DateTime? @map("approved_utc")

  // roles in Communities related to this Person
  Members Members[]
  //Validators Validators[]
  //Auditors   Auditors[]

  @@map("persons")
}

model Community {
  uid         String   @id @unique @default(uuid())
  accountId   String?  @map("account_id")
  adminUid    String   @map("admin_uid")
  state       String // P-Pending A-Active V-Verified S-Suspended X-Deleted  
  name        String
  description String?
  image       String? // a DataURL
  createdUtc  DateTime @default(now()) @map("created_utc")
  updatedUtc  DateTime @updatedAt @map("updated_utc")
  approvedUtc DateTime @map("approved_utc")

  // Persons related to this Community
  Members Members[]
  //Validators Validators[]
  //Auditors   Auditors[]

  @@map("communities")
}

model Members {
  // members of this community
  communityUid String
  community    Community @relation(fields: [communityUid], references: [uid])
  personUid    String
  person       Person    @relation(fields: [personUid], references: [uid])
  createdUtc   DateTime  @default(now()) @map("created_utc")
  approvedUtc  DateTime?

  @@id([communityUid, personUid])
  @@map("members")
}
