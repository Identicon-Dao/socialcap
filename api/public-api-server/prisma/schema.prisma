// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// Entities
// 
model Session {
  uid        String   @id @unique @default(uuid())
  otp        String
  email      String
  createdUtc DateTime @default(now()) @map("created_utc")
  updatedUtc DateTime @updatedAt @map("updated_utc")

  @@map("sessions")
}

model Person {
  uid         String    @id @unique @default(uuid())
  accountId   String?   @map("account_id")
  fullName    String    @map("full_name")
  state       String // P-Pending A-Active V-Verified S-Suspended X-Deleted  
  email       String    @unique
  phone       String?
  telegram    String?
  avatar      String? // a DataURI
  preferences String?
  tags        String    @default("[]")
  createdUtc  DateTime  @default(now()) @map("created_utc")
  updatedUtc  DateTime  @updatedAt @map("updated_utc")
  approvedUtc DateTime? @map("approved_utc")

  // roles in Communities related to this Person
  Members    Members[]
  Admins     Admins[]
  Validators Validators[]
  Auditors   Auditors[]

  @@map("persons")
}

model Community {
  uid         String   @id @unique @default(uuid())
  accountId   String?  @map("account_id")
  fullName    String   @map("full_name")
  state       String // P-Pending A-Active V-Verified S-Suspended X-Deleted  
  logo        String? // a DataURI
  createdUtc  DateTime @default(now()) @map("created_utc")
  updatedUtc  DateTime @updatedAt @map("updated_utc")
  approvedUtc DateTime @map("approved_utc")

  // Persons related to this Community
  Members    Members[]
  Admins     Admins[]
  Validators Validators[]
  Auditors   Auditors[]

  @@map("communities")
}

model Members {
  // members of this community
  community    Community @relation(fields: [communityUid], references: [uid])
  communityUid String
  person       Person    @relation(fields: [personUid], references: [uid])
  personUid    String
  createdUtc   DateTime  @default(now()) @map("created_utc")
  approvedUtc  DateTime

  @@id([communityUid, personUid])
  @@map("members")
}

model Admins {
  // administrators of this community
  community    Community @relation(fields: [communityUid], references: [uid])
  communityUid String
  person       Person    @relation(fields: [personUid], references: [uid])
  personUid    String
  createdUtc   DateTime  @default(now()) @map("created_utc")
  approvedUtc  DateTime

  @@id([communityUid, personUid])
  @@map("admins")
}

model Validators {
  // validators of this community
  community    Community @relation(fields: [communityUid], references: [uid])
  communityUid String
  person       Person    @relation(fields: [personUid], references: [uid])
  personUid    String
  createdUtc   DateTime  @default(now()) @map("created_utc")
  approvedUtc  DateTime

  @@id([communityUid, personUid])
  @@map("validators")
}

model Auditors {
  // auditors of this community
  community    Community @relation(fields: [communityUid], references: [uid])
  communityUid String
  person       Person    @relation(fields: [personUid], references: [uid])
  personUid    String
  createdUtc   DateTime  @default(now()) @map("created_utc")
  approvedUtc  DateTime

  @@id([communityUid, personUid])
  @@map("auditors")
}

//
// Merkle Trees schema
//

// model MerkleTree {
//   uid   String @id @unique @default(uuid())
//   name  String @unique
//   root  String @db.VarChar(128)
//   nodes String def
//   size  Int
// 
//   @@map("merkle_trees")
// }
// 
// model MerkleLeaf {
//   uid          String @id @unique @default(uuid())
//   merkleTreeUid String @map("merkle_tree_uid")
//   index        BigInt
//   // witness      Json   @db.Json // is this necessary ???
// 
//   // stringified data which has used to build the hashed, this may not be 
//   // the full data stored in the Database for some entity but just the
//   // data needed to verify existence in the MerkleTree
//   // example: '{\"accountId\":\"0xB234...5678\"}'
//   hash String @db.VarChar(128)
//   data String @default("{}") @db.Text
// 
//   @@map("merkle_leaves")
// }
